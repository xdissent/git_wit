{"name":"GitWit","tagline":"Dead simple Git hosting for Rails apps.","body":"[![Build Status](https://travis-ci.org/xdissent/git_wit.png?branch=master)](https://travis-ci.org/xdissent/git_wit)\r\n\r\n## Quickstart\r\n\r\nRun `rails g git_wit:install` and checkout `config/initializers/git_wit.rb`.\r\nYou'll want to first change `config.repositories_path` to a folder where you'd\r\nlike to store your repositories. Let's use \"tmp/repositories\" in our app root\r\nfor fun:\r\n\r\n```ruby\r\nconfig.repositories_path = Rails.root.join(\"tmp\", \"repositories\").to_s\r\n```\r\n\r\nNormall you wouldn't want to allow users to send their authentication \r\ncredentials over an insecure protocol like HTTP, because they'll be sent in \r\nplain text over the wire. And since anonymous write access is always disallowed,\r\nthat means you can't safely push over HTTP without SSL. To disable these \r\nprotections, something you'd **never** do in a production environment, change\r\nthe following config values in the initializer:\r\n\r\n```\r\nconfig.insecure_auth = true\r\nconfig.insecure_write = true\r\n```\r\n\r\nNow let's set up some simple (fake) authentication and authorization:\r\n\r\n```ruby\r\nconfig.authenticate = ->(user, password) do\r\n  %w(reader writer).include?(user) && user == password\r\nend\r\n\r\nconfig.authorize_read = ->(user, repository) do\r\n  %w(reader writer).include?(user)\r\nend\r\n\r\nconfig.authorize_write = ->(user, repository) do\r\n  user == \"writer\"\r\nend\r\n```\r\n\r\nWhat we've done is effectively create two users: `reader` and `writer`. Both can\r\nread all repositories, but only `writer` may write (and can write to any repo.)\r\nBoth users are considered authenticated if the password matches the username.\r\n\r\nNow your app is ready to start serving git repos over HTTP. Just create the \r\nrepositories folder, initialize a repo and start the server:\r\n\r\n```console\r\n$ mkdir -p tmp/repositories\r\n$ git init --bare tmp/repositories/example.git\r\n$ rails s\r\n```\r\n\r\nClone your repo, make some changes, and push:\r\n\r\n```console\r\n$ git clone http://localhost:3000/example.git\r\n$ cd example\r\n$ touch README\r\n$ git add README\r\n$ git commit -m \"First\"\r\n$ git push origin master\r\n```\r\n\r\nYour server will ask you for a username and password when you push - use \r\n`writer` for both and it should accept your changes.\r\n\r\n## SSH support\r\n\r\nSee the dummy app in `test/dummy` for a working example of `authorized_keys` \r\nmanagement for the `ssh_user`.\r\n\r\n**NOTE** To manage SSH keys, the `ssh_user` *must* be allowed to `sudo` as the\r\nRails application user, **and** vice versa. More documentation is forthcoming.\r\n\r\n\r\nThis project rocks and uses MIT-LICENSE.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}